#include <iostream>
#include <fstream>
#include <filesystem>
#include <string>
#include <sstream>
#include <vector>
#include <cmath>
#include <unordered_map>
#include <tuple>
using namespace std;
namespace fs = filesystem;

struct CU{                 //Daten fuer Zellemittelpunkte und Geschwindigkeiten in vectoren; nimmt Daten aus main
    vector<vector<double>> C;
    vector<vector<double>> U;
};

vector<vector<double>> readCundU(const fs::path& file_path, unordered_map<string, string> settings) {      //Einlesen von C oder U, funktioniert fuer beide; nimmt filepath von main, gibt vectors zurueck
    ifstream file(file_path);
    if (!file.is_open()) {
        cerr << "Error: Cannot open file " << file_path << endl;
        return {};
    }

    vector<vector<double>> vectors;
    string line;
    int line_start = 1;                   //hier für settings
    int Anzahl;


    while (getline(file, line)) {
        if (stod(settings["line_start"]) == stod(settings["line_start2"])){         //hier für settings, überall wo current_line, durch line_start ersetzt                   //ueberspringt 22 Zeile fuer C und U
            Anzahl = stoi(line);
            break;
        }
        ++line_start;
    }


    while (getline(file, line) && line_start <= stod(settings["line_start"]) + Anzahl) {  //hier für settings
        size_t start = line.find('(');
        size_t end = line.find(')');
        if (start != string::npos && end != string::npos && end > start) {
            string numbers = line.substr(start + 1, end - start - 1);
            istringstream iss(numbers);
            vector<double> vec(3);       //hier für settings?
            if (iss >> vec[0] >> vec[1] >> vec[2]) {
                vectors.push_back(vec);
            }
        }
        ++line_start;
    }
    cout << file_path << " eingelesen." << endl;
    file.close();
    return vectors;                                     //gibt vector C oder U zurueck
}

//Koordinaten konvertieren zu string fuer Hash Table
//nimmt vector C, gibt fuer jeden x/y/z Wert ein Schluessel, die Werte werden in einem Feld gespeichert; falls ein Schuessel abgeruft, den zupassenden Wert wird ausgefunden
string make_key(double x, double y, double z) {        //"x,y,z" = Achse fuer vector C
    return to_string(x) + "," + to_string(y) + "," + to_string(z);  //definiert key in string
}

// Berechnung der Gradienten
vector<double> Abl(const vector<vector<double>> &C, const vector<vector<double>> &U,
                   unordered_map<string, int> &point_index, int i, double dx, double dy, double dz, unordered_map<string, string> settings) {
    double x = C[i][0], y = C[i][1], z = C[i][2]; // [i] := Index der Zellemittelpunkten(C) (kommt aus main); [0,1,2] := Koordinaten x,y,z
    string key_plus = make_key(x + dx, y + dy, z + dz);
    string key_minus = make_key(x - dx, y - dy, z - dz);

    vector<double> diff(3, 0.0);  //hier für settings?   // 3 := Anzahl der Dimension; 0.0 := Anfangswert; berechnet die Differenzen zwischen zwei U vectors
    if (point_index.count(key_plus) && point_index.count(key_minus)) {   // count := Funktion, nachprueft ob "key" existiert
        // fuer interne Zelle
        int idx_plus = point_index[key_plus];      //idx_plus := C mit dem groesseren Koordinatenwert fuer x/y/z einzel
        int idx_minus = point_index[key_minus];    //idx_minus := C mit dem kleineren Koordinatenwert fuer x/y/z einzel
        double cell_distance = stod(settings["cell_distance"]);
        for (int j = 0; j < 3; ++j) {
            diff[j] = (U[idx_plus][j] - U[idx_minus][j])/cell_distance; //hier für settings
        }                                       // fuer jede Richtung gibt es zwei Randzellen(Anfangszelle, Endeszelle)
    } else if (point_index.count(key_plus)) {//fuer Anfangsrandzellen(nur Zellekoordinaten +0.4 existieren, kein kleinere Koordinaten gibt)
        int idx_plus = point_index[key_plus];
        double cell_distance = stod(settings["cell_distance"]);
        for (int j = 0; j < 3; ++j) {
            diff[j] = (U[idx_plus][j] - U[i][j])/cell_distance; //hier für settings
        }
    } else if (point_index.count(key_minus)) {//fuer Endesrandzellen(nur Zellekoordinaten -0.4 existieren, kein groessere Koordinaten gibt)
        int idx_minus = point_index[key_minus];
        double cell_distance = stod(settings["cell_distance"]);
        for (int j = 0; j < 3; ++j) {
            diff[j] = (U[i][j] - U[idx_minus][j])/cell_distance; //hier für settings
        }
    }
    return diff;       //gibt ein vector zurueck
}
void einschreiben_von_gradienten(const vector<vector<vector<double>>>& results, const fs::path& file_path,unordered_map<string, string> settings){ //schreibt die Gradienten in die Datei grad(U) ein
    ifstream input_file(file_path);     //oeffnet die Datei grad(U)
    if (!input_file.is_open()) {
        cerr << "Error: Cannot open file for reading: " << file_path << endl;
        return;
    }

    vector<string> file_lines;
    string line;

    while (getline(input_file, line)) {    //speichert den originalen Inhalt der Datei
        file_lines.push_back(line);
    }
    input_file.close();

    // bildet ein string fuer Gradienten vector
    vector<string> new_lines;
    for (const auto& matrix : results) {
        ostringstream gradient;
        gradient << "( ";
        for (const auto& row : matrix) {
            for (size_t i = 0; i < row.size(); ++i) {
                gradient << row[i];
                if (i < row.size() - 1) gradient << " ";
            }
            gradient << " ";
        }
        gradient << ")";
        new_lines.push_back(gradient.str());
    }

    // fuegt die Gradienten auf Zeile 24 ein
    int line_skip = 23;
    file_lines.insert(file_lines.begin() + stod(settings["line_skip"]), new_lines.begin(), new_lines.end()); //hier für settings

    // schreibt die ganze Datei zurueck
    ofstream output_file(file_path);
    if (!output_file.is_open()) {
        cerr << "Error: Cannot open file for writing: " << file_path << endl;
        return;
    }

    for (const auto& file_line : file_lines) {
        output_file << file_line << "\n";
    }

    output_file.close();
}
void einschreiben_von_Q(const vector<double>& Q, const fs::path& file_path, unordered_map<string, string> settings) {
    ifstream input_file(file_path);
    if (!input_file.is_open()) {
        cerr << "Error: Cannot open file for reading: " << file_path << endl;
        return;
    }

    vector<string> file_lines;
    string line;

    while (getline(input_file, line)) {
        file_lines.push_back(line);
    }
    input_file.close();

    vector<string> new_lines;
    for (const auto& value : Q) {
        ostringstream ss;
        ss << value;
        new_lines.push_back(ss.str());
    }
    file_lines.insert(file_lines.begin() + stod(settings["line_skip_new"]), new_lines.begin(), new_lines.end()); //hier für settings

    ofstream output_file(file_path);
    if (!output_file.is_open()) {
        cerr << "Error: Cannot open file for writing: " << file_path << endl;
        return;
    }

    for (const auto& file_line : file_lines) {
        output_file << file_line << "\n";
    }
    output_file.close();
}
vector<double> Q_Kriterium(const vector<vector<vector<double>>>&results){
    vector<double> Q_Kriterium(results.size(), 0.0);
    for (int i = 0; i < results.size(); i++){
        Q_Kriterium[i] = (pow(results[i][0][0]+results[i][1][1]+results[i][2][2],2.0) - (results[i][0][0]
                                                                                         *results[i][0][0]+results[i][0][1]*results[i][1][0]+results[i][0][2]*results[i][2][0]-(results[i][1][0]
                                                                                                                                                                                *results[i][0][1]+results[i][1][1]*results[i][1][1]+results[i][1][2]*results[i][2][1])-(results[i][2][0]
                                                                                                                                                                                                                                                                        *results[i][0][2]+results[i][2][1]*results[i][1][2]+results[i][2][2]*results[i][2][2])))*0.5;
    }
    return Q_Kriterium;
}



unordered_map<string, string> displaySettings(const fs::path& file_path) {
    ifstream file(file_path);
    if (!file.is_open()) {
        cerr << "Error: Cannot open file " << file_path << endl;
        return {};
    }

    unordered_map<string, string> settings;
    string line;
    while (getline(file, line)) {
        size_t pos = line.find('=');
        if (pos != string::npos) {
            string key = line.substr(0, pos);
            string value = line.substr(pos + 1);
            settings[key] = value;
        }
    }
    file.close();
    return settings;
}

fs::path create_file(const fs::path& source_folder_path, const fs::path& target_folder_path, string file_name){
    fs::path source_file = source_folder_path / file_name;
    fs::path target_file = target_folder_path / file_name;
    fs::copy_file(source_file, target_file, fs::copy_options::overwrite_existing);//kopiert die leere Datei und speichert in tragetfolder
    cout << "File copied successfully: " << target_file << endl;

    return target_file;
}

int main() {/*
    //folderpath und filename von eingelesenen Dateien
    string folder_path_CundU = ".\\Wuerfel\\0";
    string C_file_name = "C";
    string U_file_name = "U";
    fs::path C_file_path = findFileInDirectory(folder_path_CundU, C_file_name);
    fs::path U_file_path = findFileInDirectory(folder_path_CundU, U_file_name);



*/
// Laden der Einstellungen
    fs::path settings_file_path = ".\\Wuerfel\\settings.txt";
    unordered_map<string, string> settings = displaySettings(settings_file_path);

// Pfade und Dateinamen aus der Settings-Datei verwenden
    string folder_path_CundU = settings["\"folder_path_CundU\""];
    string C_file_name = settings["\"C_file_name\""];
    string U_file_name = settings["\"U_file_name\""];

    //liest und speichert die eingelesenen Daten in vector anhand des filepath ueber die Funktionen ; speichert diese Automatisch in der struct.

    vector<vector<double>> C = readCundU(C_file_name,settings);
    vector<vector<double>> U = readCundU(U_file_name, settings);

    // Buildung von Hash Table, deklariert map und erstellt keys
    unordered_map<string, int> point_index;
    for (int i = 0; i < C.size(); ++i) {
        point_index[make_key(C[i][0], C[i][1], C[i][2])] = i;
    }

    // vector fuer die berechneten Gradienten
    vector<vector<vector<double>>> results;

    for (int i = 0; i < C.size(); ++i) { // matrix nimmt die Daten von Funktion Abl; matrix := Jacobbi-Matrix; matrix
        vector<vector<double>> matrix(3, vector<double>(3, 0.0));//jede Zeile von matrix verpackt die partiellen Ableitungen
        
        matrix[0] = Abl(C, U, point_index, i, stod(settings["matrix0_dx"]), stod(settings["matrix0_dy"]), stod(settings["matrix0_dz"]),settings); // x Richtung //hier für settings
        matrix[1] = Abl(C, U, point_index, i, stod(settings["matrix1_dx"]), stod(settings["matrix1_dy"]), stod(settings["matrix1_dz"]),settings); // y Richtung //hier für settings
        matrix[2] = Abl(C, U, point_index, i, stod(settings["matrix2_dx"]), stod(settings["matrix2_dy"]), stod(settings["matrix2_dz"]),settings); // z Richtung //hier für settings
        results.push_back(matrix); //speichert die Werte von matrix ins results
    }
/*
    // Ausdruck von results auf Terminal
    for (int i = 0; i < results.size(); ++i) {
        cout << "( ";
        for (const auto& row : results[i]) {
            for (double value : row) {
                cout << value << " ";
            }
        }
        cout << ")" << endl;
    }*/
    fs::path output_file_path = create_file(".\\Wuerfel",folder_path_CundU, "grad(U)");
    fs::path Q_file_path = create_file(".\\Wuerfel",folder_path_CundU, "Q");
    einschreiben_von_gradienten(results, output_file_path,settings);
    vector<double> Q = Q_Kriterium(results); // kommt auch in die settings-Datei
    einschreiben_von_Q(Q, Q_file_path,settings); //alle funktionen kommen in settings-Datei
    return 0;
}
